{"version":3,"sources":["createBottomTabNavigator.tsx"],"names":["React","View","StyleSheet","ScreenContainer","createTabNavigator","BottomTabBar","ResourceSavingScene","TabNavigationView","state","loaded","props","navigation","index","_getButtonComponent","route","descriptors","descriptor","key","options","tabBarButtonComponent","undefined","_renderTabBar","tabBarComponent","TabBarComponent","tabBarOptions","screenProps","getLabelText","getAccessibilityLabel","getAccessibilityRole","getAccessibilityStates","getTestID","renderIcon","onTabPress","onTabLongPress","routes","tabBarVisible","_jumpTo","onIndexChange","findIndex","renderScene","lazy","styles","container","pages","map","includes","isFocused","absoluteFill","nextProps","prevState","PureComponent","defaultProps","focused","create","flex","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  View,\r\n  StyleSheet,\r\n  AccessibilityRole,\r\n  AccessibilityState,\r\n} from 'react-native';\r\nimport { NavigationRoute } from 'react-navigation';\r\n\r\n// eslint-disable-next-line import/no-unresolved\r\nimport { ScreenContainer } from 'react-native-screens';\r\n\r\nimport createTabNavigator, {\r\n  NavigationViewProps,\r\n} from '../utils/createTabNavigator';\r\nimport BottomTabBar from '../views/BottomTabBar';\r\nimport ResourceSavingScene from '../views/ResourceSavingScene';\r\nimport {\r\n  NavigationTabProp,\r\n  NavigationBottomTabOptions,\r\n  BottomTabBarOptions,\r\n  SceneDescriptorMap,\r\n} from '../types';\r\n\r\ntype Config = {\r\n  lazy?: boolean;\r\n  tabBarComponent?: React.ComponentType<any>;\r\n  tabBarOptions?: BottomTabBarOptions;\r\n};\r\n\r\ntype Props = NavigationViewProps &\r\n  Config & {\r\n    getAccessibilityRole: (props: {\r\n      route: NavigationRoute;\r\n    }) => AccessibilityRole | undefined;\r\n    getAccessibilityStates: (props: {\r\n      route: NavigationRoute;\r\n      focused: boolean;\r\n    }) => AccessibilityState[];\r\n    navigation: NavigationTabProp;\r\n    descriptors: SceneDescriptorMap;\r\n    screenProps?: unknown;\r\n  };\r\n\r\ntype State = {\r\n  loaded: number[];\r\n};\r\n\r\nclass TabNavigationView extends React.PureComponent<Props, State> {\r\n  static defaultProps = {\r\n    lazy: true,\r\n    getAccessibilityRole: (): AccessibilityRole => 'button',\r\n    getAccessibilityStates: ({\r\n      focused,\r\n    }: {\r\n      focused: boolean;\r\n    }): AccessibilityState[] => (focused ? ['selected'] : []),\r\n  };\r\n\r\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\r\n    const { index } = nextProps.navigation.state;\r\n\r\n    return {\r\n      // Set the current tab to be loaded if it was not loaded before\r\n      loaded: prevState.loaded.includes(index)\r\n        ? prevState.loaded\r\n        : [...prevState.loaded, index],\r\n    };\r\n  }\r\n\r\n  state = {\r\n    loaded: [this.props.navigation.state.index],\r\n  };\r\n\r\n  _getButtonComponent = ({ route }: { route: NavigationRoute }) => {\r\n    const { descriptors } = this.props;\r\n    const descriptor = descriptors[route.key];\r\n    const options = descriptor.options;\r\n\r\n    if (options.tabBarButtonComponent) {\r\n      return options.tabBarButtonComponent;\r\n    }\r\n\r\n    return undefined;\r\n  };\r\n\r\n  _renderTabBar = () => {\r\n    const {\r\n      tabBarComponent: TabBarComponent = BottomTabBar,\r\n      tabBarOptions,\r\n      navigation,\r\n      screenProps,\r\n      getLabelText,\r\n      getAccessibilityLabel,\r\n      getAccessibilityRole,\r\n      getAccessibilityStates,\r\n      getTestID,\r\n      renderIcon,\r\n      onTabPress,\r\n      onTabLongPress,\r\n    } = this.props;\r\n\r\n    const { descriptors } = this.props;\r\n    const { state } = this.props.navigation;\r\n    const route = state.routes[state.index];\r\n    const descriptor = descriptors[route.key];\r\n    const options = descriptor.options;\r\n\r\n    if (options.tabBarVisible === false) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <TabBarComponent\r\n        {...tabBarOptions}\r\n        jumpTo={this._jumpTo}\r\n        navigation={navigation}\r\n        screenProps={screenProps}\r\n        onTabPress={onTabPress}\r\n        onTabLongPress={onTabLongPress}\r\n        getLabelText={getLabelText}\r\n        getButtonComponent={this._getButtonComponent}\r\n        getAccessibilityLabel={getAccessibilityLabel}\r\n        getAccessibilityRole={getAccessibilityRole}\r\n        getAccessibilityStates={getAccessibilityStates}\r\n        getTestID={getTestID}\r\n        renderIcon={renderIcon}\r\n      />\r\n    );\r\n  };\r\n\r\n  _jumpTo = (key: string) => {\r\n    const { navigation, onIndexChange } = this.props;\r\n\r\n    const index = navigation.state.routes.findIndex(route => route.key === key);\r\n\r\n    onIndexChange(index);\r\n  };\r\n\r\n  render() {\r\n    const { navigation, renderScene, lazy } = this.props;\r\n    const { routes } = navigation.state;\r\n    const { loaded } = this.state;\r\n\r\n    return (\r\n      <View style={styles.container}>\r\n        <ScreenContainer style={styles.pages}>\r\n          {routes.map((route, index) => {\r\n            if (lazy && !loaded.includes(index)) {\r\n              // Don't render a screen if we've never navigated to it\r\n              return null;\r\n            }\r\n\r\n            const isFocused = navigation.state.index === index;\r\n\r\n            return (\r\n              <ResourceSavingScene\r\n                key={route.key}\r\n                style={StyleSheet.absoluteFill}\r\n                isVisible={isFocused}\r\n              >\r\n                {renderScene({ route })}\r\n              </ResourceSavingScene>\r\n            );\r\n          })}\r\n        </ScreenContainer>\r\n        {this._renderTabBar()}\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    overflow: 'hidden',\r\n  },\r\n  pages: {\r\n    flex: 1,\r\n  },\r\n});\r\n\r\nexport default createTabNavigator<Config, NavigationBottomTabOptions, Props>(\r\n  TabNavigationView\r\n);\r\n"]}