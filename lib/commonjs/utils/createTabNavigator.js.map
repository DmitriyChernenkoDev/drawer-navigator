{"version":3,"sources":["createTabNavigator.tsx"],"names":["createTabNavigator","TabView","NavigationView","_renderScene","route","props","screenProps","descriptors","descriptor","key","TabComponent","getComponent","navigation","_renderIcon","focused","tintColor","horizontal","options","tabBarIcon","_getLabelText","tabBarLabel","title","routeName","_getAccessibilityLabel","tabBarAccessibilityLabel","label","routes","state","indexOf","length","undefined","_getTestID","tabBarTestID","_makeDefaultHandler","isFocused","hasOwnProperty","index","dispatch","StackActions","popToTop","emit","_jumpTo","_handleTabPress","_isTabPress","Promise","resolve","then","defaultHandler","tabBarOnPress","_handleTabLongPress","tabBarOnLongPress","_handleIndexChange","SwitchActions","jumpTo","navigationConfig","React","Component","config","router"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  TabRouter,\r\n  StackActions,\r\n  SceneView,\r\n  createNavigator,\r\n  SwitchActions,\r\n  NavigationRoute,\r\n  NavigationRouteConfigMap,\r\n  CreateNavigatorConfig,\r\n  NavigationTabRouterConfig,\r\n} from 'react-navigation';\r\nimport {\r\n  NavigationTabProp,\r\n  NavigationCommonTabOptions,\r\n  SceneDescriptorMap,\r\n} from '../types';\r\n\r\ntype RouteConfig<Options> = NavigationRouteConfigMap<\r\n  Options,\r\n  NavigationTabProp<NavigationRoute, any>\r\n>;\r\n\r\ntype CommonProps = {\r\n  navigation: NavigationTabProp;\r\n  descriptors: SceneDescriptorMap;\r\n  screenProps?: unknown;\r\n};\r\n\r\ntype ExtraProps<Config extends {}> = {\r\n  navigationConfig: Config;\r\n};\r\n\r\nexport type RenderIconProps = {\r\n  route: NavigationRoute;\r\n  focused: boolean;\r\n  tintColor?: string;\r\n  horizontal?: boolean;\r\n};\r\n\r\nexport type NavigationViewProps = {\r\n  getLabelText: (props: { route: NavigationRoute }) => string | undefined;\r\n  getAccessibilityLabel: (props: {\r\n    route: NavigationRoute;\r\n  }) => string | undefined;\r\n  getTestID: (props: { route: NavigationRoute }) => string | undefined;\r\n  renderIcon: (props: RenderIconProps) => React.ReactNode;\r\n  renderScene: (props: { route: NavigationRoute }) => React.ReactNode;\r\n  onIndexChange: (index: number) => void;\r\n  onTabPress: (props: { route: NavigationRoute }) => void;\r\n  onTabLongPress: (props: { route: NavigationRoute }) => void;\r\n};\r\n\r\nexport default function createTabNavigator<\r\n  Config extends {},\r\n  Options extends NavigationCommonTabOptions,\r\n  Props extends NavigationViewProps & CommonProps\r\n>(TabView: React.ComponentType<Props & Config & Options>) {\r\n  class NavigationView extends React.Component<\r\n    Exclude<Props, NavigationViewProps> & ExtraProps<Config>\r\n  > {\r\n    _renderScene = ({ route }: { route: { key: string } }) => {\r\n      const { screenProps, descriptors } = this.props;\r\n      const descriptor = descriptors[route.key];\r\n      const TabComponent = descriptor.getComponent();\r\n      return (\r\n        <SceneView\r\n          screenProps={screenProps}\r\n          navigation={descriptor.navigation}\r\n          component={TabComponent}\r\n        />\r\n      );\r\n    };\r\n\r\n    _renderIcon = ({\r\n      route,\r\n      focused,\r\n      tintColor,\r\n      horizontal = false,\r\n    }: RenderIconProps) => {\r\n      const { descriptors } = this.props;\r\n      const descriptor = descriptors[route.key];\r\n      const options = descriptor.options;\r\n\r\n      if (options.tabBarIcon) {\r\n        return typeof options.tabBarIcon === 'function'\r\n          ? options.tabBarIcon({ focused, tintColor, horizontal })\r\n          : options.tabBarIcon;\r\n      }\r\n\r\n      return null;\r\n    };\r\n\r\n    _getLabelText = ({ route }: { route: NavigationRoute }) => {\r\n      const { descriptors } = this.props;\r\n      const descriptor = descriptors[route.key];\r\n      const options = descriptor.options;\r\n\r\n      if (options.tabBarLabel) {\r\n        return options.tabBarLabel;\r\n      }\r\n\r\n      if (typeof options.title === 'string') {\r\n        return options.title;\r\n      }\r\n\r\n      return route.routeName;\r\n    };\r\n\r\n    _getAccessibilityLabel = ({ route }: { route: NavigationRoute }) => {\r\n      const { descriptors } = this.props;\r\n      const descriptor = descriptors[route.key];\r\n      const options = descriptor.options;\r\n\r\n      if (typeof options.tabBarAccessibilityLabel !== 'undefined') {\r\n        return options.tabBarAccessibilityLabel;\r\n      }\r\n\r\n      const label = this._getLabelText({ route });\r\n\r\n      if (typeof label === 'string') {\r\n        const { routes } = this.props.navigation.state;\r\n        return `${label}, tab, ${routes.indexOf(route) + 1} of ${\r\n          routes.length\r\n        }`;\r\n      }\r\n\r\n      return undefined;\r\n    };\r\n\r\n    _getTestID = ({ route }: { route: NavigationRoute }) => {\r\n      const { descriptors } = this.props;\r\n      const descriptor = descriptors[route.key];\r\n      const options = descriptor.options;\r\n\r\n      return options.tabBarTestID;\r\n    };\r\n\r\n    _makeDefaultHandler = ({\r\n      route,\r\n      navigation,\r\n    }: {\r\n      route: NavigationRoute;\r\n      navigation: NavigationTabProp;\r\n    }) => () => {\r\n      if (navigation.isFocused()) {\r\n        if (route.hasOwnProperty('index') && route.index > 0) {\r\n          // If current tab has a nested navigator, pop to top\r\n          navigation.dispatch(StackActions.popToTop({ key: route.key }));\r\n        } else {\r\n          navigation.emit('refocus');\r\n        }\r\n      } else {\r\n        this._jumpTo(route.routeName);\r\n      }\r\n    };\r\n\r\n    _handleTabPress = ({ route }: { route: NavigationRoute }) => {\r\n      this._isTabPress = true;\r\n\r\n      // After tab press, handleIndexChange will be called synchronously\r\n      // So we reset it in promise callback\r\n      Promise.resolve().then(() => (this._isTabPress = false));\r\n\r\n      const { descriptors } = this.props;\r\n      const descriptor = descriptors[route.key];\r\n      const { navigation, options } = descriptor;\r\n\r\n      const defaultHandler = this._makeDefaultHandler({ route, navigation });\r\n\r\n      if (options.tabBarOnPress) {\r\n        options.tabBarOnPress({ navigation, defaultHandler });\r\n      } else {\r\n        defaultHandler();\r\n      }\r\n    };\r\n\r\n    _handleTabLongPress = ({ route }: { route: NavigationRoute }) => {\r\n      const { descriptors } = this.props;\r\n      const descriptor = descriptors[route.key];\r\n      const { navigation, options } = descriptor;\r\n\r\n      const defaultHandler = this._makeDefaultHandler({ route, navigation });\r\n\r\n      if (options.tabBarOnLongPress) {\r\n        options.tabBarOnLongPress({ navigation, defaultHandler });\r\n      } else {\r\n        defaultHandler();\r\n      }\r\n    };\r\n\r\n    _handleIndexChange = (index: number) => {\r\n      if (this._isTabPress) {\r\n        this._isTabPress = false;\r\n        return;\r\n      }\r\n\r\n      this._jumpTo(this.props.navigation.state.routes[index].routeName);\r\n    };\r\n\r\n    _jumpTo = (routeName: string) => {\r\n      const { navigation } = this.props;\r\n\r\n      navigation.dispatch(\r\n        SwitchActions.jumpTo({\r\n          routeName,\r\n          key: navigation.state.key,\r\n        })\r\n      );\r\n    };\r\n\r\n    _isTabPress: boolean = false;\r\n\r\n    render() {\r\n      const {\r\n        descriptors,\r\n        navigation,\r\n        screenProps,\r\n        navigationConfig,\r\n      } = this.props;\r\n      const { state } = navigation;\r\n      const route = state.routes[state.index];\r\n      const descriptor = descriptors[route.key];\r\n\r\n      return (\r\n        // TODO: don't have time to fix it right now\r\n        // @ts-ignore\r\n        <TabView\r\n          {...navigationConfig}\r\n          {...descriptor.options}\r\n          getLabelText={this._getLabelText}\r\n          getAccessibilityLabel={this._getAccessibilityLabel}\r\n          getTestID={this._getTestID}\r\n          renderIcon={this._renderIcon}\r\n          renderScene={this._renderScene}\r\n          onIndexChange={this._handleIndexChange}\r\n          onTabPress={this._handleTabPress}\r\n          onTabLongPress={this._handleTabLongPress}\r\n          navigation={navigation}\r\n          descriptors={descriptors}\r\n          screenProps={screenProps}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    routes: RouteConfig<Options>,\r\n    config: CreateNavigatorConfig<\r\n      Partial<Config>,\r\n      NavigationTabRouterConfig,\r\n      Partial<Options>,\r\n      NavigationTabProp<NavigationRoute, any>\r\n    > = {}\r\n  ) => {\r\n    const router = TabRouter(routes, config as any);\r\n\r\n    return createNavigator(NavigationView as any, router, config as any);\r\n  };\r\n}\r\n"]}