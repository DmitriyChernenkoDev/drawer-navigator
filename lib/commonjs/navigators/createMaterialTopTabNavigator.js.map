{"version":3,"sources":["createMaterialTopTabNavigator.tsx"],"names":["MaterialTabView","_renderLazyPlaceholder","props","LazyPlaceholder","lazyPlaceholderComponent","_renderTabBar","state","navigation","route","routes","index","descriptors","descriptor","key","options","tabBarVisible","getLabelText","getAccessibilityLabel","getTestID","renderIcon","onTabPress","onTabLongPress","tabBarComponent","TabBarComponent","MaterialTopTabBar","tabBarPosition","tabBarOptions","screenProps","rest","swipeEnabled","React","PureComponent"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { StyleProp, ViewStyle } from 'react-native';\r\nimport { TabView, SceneRendererProps } from 'react-native-tab-view';\r\nimport createTabNavigator, {\r\n  NavigationViewProps,\r\n} from '../utils/createTabNavigator';\r\nimport MaterialTopTabBar from '../views/MaterialTopTabBar';\r\nimport {\r\n  NavigationTabProp,\r\n  NavigationMaterialTabOptions,\r\n  MaterialTabBarOptions,\r\n  SceneDescriptorMap,\r\n} from '../types';\r\n\r\ntype Route = {\r\n  key: string;\r\n  routeName: string;\r\n};\r\n\r\ntype Config = {\r\n  keyboardDismissMode?: 'none' | 'on-drag';\r\n  swipeEnabled?: boolean;\r\n  swipeDistanceThreshold?: number;\r\n  swipeVelocityThreshold?: number;\r\n  initialLayout?: { width?: number; height?: number };\r\n  lazy?: boolean;\r\n  lazyPlaceholderComponent?: React.ComponentType<{ route: Route }>;\r\n  tabBarComponent?: React.ComponentType<any>;\r\n  tabBarOptions?: MaterialTabBarOptions;\r\n  tabBarPosition?: 'top' | 'bottom';\r\n  sceneContainerStyle?: StyleProp<ViewStyle>;\r\n  style?: StyleProp<ViewStyle>;\r\n};\r\n\r\ntype Props = NavigationViewProps &\r\n  Config & {\r\n    onSwipeStart?: () => void;\r\n    onSwipeEnd?: () => void;\r\n    navigation: NavigationTabProp;\r\n    descriptors: SceneDescriptorMap;\r\n    screenProps?: unknown;\r\n  };\r\n\r\nclass MaterialTabView extends React.PureComponent<Props> {\r\n  _renderLazyPlaceholder = (props: { route: Route }) => {\r\n    const { lazyPlaceholderComponent: LazyPlaceholder } = this.props;\r\n\r\n    if (LazyPlaceholder != null) {\r\n      return <LazyPlaceholder {...props} />;\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  _renderTabBar = (props: SceneRendererProps) => {\r\n    const { state } = this.props.navigation;\r\n    const route = state.routes[state.index];\r\n    const { descriptors } = this.props;\r\n    const descriptor = descriptors[route.key];\r\n    const options = descriptor.options;\r\n\r\n    const tabBarVisible =\r\n      options.tabBarVisible == null ? true : options.tabBarVisible;\r\n\r\n    const {\r\n      navigation,\r\n      getLabelText,\r\n      getAccessibilityLabel,\r\n      getTestID,\r\n      renderIcon,\r\n      onTabPress,\r\n      onTabLongPress,\r\n      tabBarComponent: TabBarComponent = MaterialTopTabBar,\r\n      tabBarPosition,\r\n      tabBarOptions,\r\n      screenProps,\r\n    } = this.props;\r\n\r\n    if (TabBarComponent === null || !tabBarVisible) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <TabBarComponent\r\n        {...tabBarOptions}\r\n        {...props}\r\n        tabBarPosition={tabBarPosition}\r\n        screenProps={screenProps}\r\n        navigation={navigation}\r\n        getLabelText={getLabelText}\r\n        getAccessibilityLabel={getAccessibilityLabel}\r\n        getTestID={getTestID}\r\n        renderIcon={renderIcon}\r\n        onTabPress={onTabPress}\r\n        onTabLongPress={onTabLongPress}\r\n      />\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      /* eslint-disable @typescript-eslint/no-unused-vars */\r\n      getLabelText,\r\n      getAccessibilityLabel,\r\n      getTestID,\r\n      renderIcon,\r\n      onTabPress,\r\n      onTabLongPress,\r\n      screenProps,\r\n      lazyPlaceholderComponent,\r\n      tabBarComponent,\r\n      tabBarOptions,\r\n      /* eslint-enable @typescript-eslint/no-unused-vars */\r\n      navigation,\r\n      descriptors,\r\n      ...rest\r\n    } = this.props;\r\n\r\n    const { state } = navigation;\r\n    const route = state.routes[state.index];\r\n\r\n    const descriptor = descriptors[route.key];\r\n    const options = descriptor.options;\r\n\r\n    let swipeEnabled =\r\n      // @ts-ignore\r\n      options.swipeEnabled == null\r\n        ? this.props.swipeEnabled\r\n        : (options as any).swipeEnabled;\r\n\r\n    if (typeof swipeEnabled === 'function') {\r\n      swipeEnabled = swipeEnabled(state);\r\n    }\r\n\r\n    return (\r\n      <TabView\r\n        {...rest}\r\n        navigationState={navigation.state}\r\n        swipeEnabled={swipeEnabled}\r\n        renderTabBar={this._renderTabBar}\r\n        renderLazyPlaceholder={this._renderLazyPlaceholder}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default createTabNavigator<Config, NavigationMaterialTabOptions, Props>(\r\n  MaterialTabView\r\n);\r\n"]}