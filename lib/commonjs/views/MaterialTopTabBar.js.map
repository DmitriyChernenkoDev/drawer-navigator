{"version":3,"sources":["MaterialTopTabBar.tsx"],"names":["TabBarTop","_renderLabel","route","focused","color","props","showLabel","upperCaseLabel","labelStyle","allowFontScaling","label","getLabelText","styles","toUpperCase","tintColor","_renderIcon","renderIcon","showIcon","iconStyle","icon","navigation","activeTintColor","inactiveTintColor","tabBarPosition","screenProps","rest","state","React","PureComponent","defaultProps","StyleSheet","create","height","width","textAlign","fontSize","margin","backgroundColor"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { View, StyleSheet } from 'react-native';\r\nimport { TabBar } from 'react-native-tab-view';\r\nimport Animated from 'react-native-reanimated';\r\nimport { NavigationRoute } from 'react-navigation';\r\nimport { MaterialTabBarProps } from '../types';\r\n\r\ntype Scene = { route: NavigationRoute; focused: boolean; color: string };\r\n\r\nexport default class TabBarTop extends React.PureComponent<\r\n  MaterialTabBarProps\r\n> {\r\n  static defaultProps = {\r\n    activeTintColor: 'rgba(255, 255, 255, 1)',\r\n    inactiveTintColor: 'rgba(255, 255, 255, 0.7)',\r\n    showIcon: false,\r\n    showLabel: true,\r\n    upperCaseLabel: true,\r\n    allowFontScaling: true,\r\n  };\r\n\r\n  _renderLabel = ({ route, focused, color }: Scene) => {\r\n    const {\r\n      showLabel,\r\n      upperCaseLabel,\r\n      labelStyle,\r\n      allowFontScaling,\r\n    } = this.props;\r\n\r\n    if (showLabel === false) {\r\n      return null;\r\n    }\r\n\r\n    const label = this.props.getLabelText({ route });\r\n\r\n    if (typeof label === 'string') {\r\n      return (\r\n        <Animated.Text\r\n          style={[styles.label, { color }, labelStyle]}\r\n          allowFontScaling={allowFontScaling}\r\n        >\r\n          {upperCaseLabel ? label.toUpperCase() : label}\r\n        </Animated.Text>\r\n      );\r\n    }\r\n\r\n    if (typeof label === 'function') {\r\n      return label({ focused, tintColor: color });\r\n    }\r\n\r\n    return label;\r\n  };\r\n\r\n  _renderIcon = ({ route, focused, color }: Scene) => {\r\n    const { renderIcon, showIcon, iconStyle } = this.props;\r\n\r\n    if (showIcon === false) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <View style={[styles.icon, iconStyle]}>\r\n        {renderIcon({\r\n          route,\r\n          focused,\r\n          tintColor: color,\r\n        })}\r\n      </View>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      navigation,\r\n      activeTintColor,\r\n      inactiveTintColor,\r\n      /* eslint-disable @typescript-eslint/no-unused-vars */\r\n      renderIcon,\r\n      getLabelText,\r\n      allowFontScaling,\r\n      showLabel,\r\n      showIcon,\r\n      upperCaseLabel,\r\n      tabBarPosition,\r\n      screenProps,\r\n      iconStyle,\r\n      /* eslint-enable @typescript-eslint/no-unused-vars */\r\n      ...rest\r\n    } = this.props;\r\n\r\n    return (\r\n      <TabBar\r\n        {...rest}\r\n        activeColor={activeTintColor}\r\n        inactiveColor={inactiveTintColor}\r\n        navigationState={navigation.state}\r\n        renderIcon={this._renderIcon}\r\n        renderLabel={this._renderLabel}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  icon: {\r\n    height: 24,\r\n    width: 24,\r\n  },\r\n  label: {\r\n    textAlign: 'center',\r\n    fontSize: 13,\r\n    margin: 4,\r\n    backgroundColor: 'transparent',\r\n  },\r\n});\r\n"]}