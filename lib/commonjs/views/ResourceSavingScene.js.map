{"version":3,"sources":["ResourceSavingScene.tsx"],"names":["FAR_FAR_AWAY","ResourceSavingScene","screensEnabled","props","isVisible","rest","children","style","styles","container","opacity","Platform","OS","attached","detached","React","Component","StyleSheet","create","flex","overflow","top"],"mappings":"k5BAAA,oDACA,yCAGA,wDAQA,GAAMA,CAAAA,YAAY,CAAG,IAArB,C,GAEqBC,CAAAA,mB,gYACV,CACP,GAAIC,oCAAkB,wCAAtB,CAAwC,iBACP,KAAKC,KADE,CAC9BC,UAD8B,aAC9BA,SAD8B,CAChBC,KADgB,kEAGtC,MAAO,qBAAC,0BAAD,wBAAQ,MAAM,CAAED,UAAS,CAAG,CAAH,CAAO,CAAhC,EAAuCC,KAAvC,EAAP,CACD,CALM,iBAOyC,KAAKF,KAP9C,CAOCC,SAPD,cAOCA,SAPD,CAOYE,QAPZ,cAOYA,QAPZ,CAOsBC,KAPtB,cAOsBA,KAPtB,CAOgCF,IAPhC,sFASP,MACE,qBAAC,iBAAD,wBACE,KAAK,CAAE,CAACG,MAAM,CAACC,SAAR,CAAmBF,KAAnB,CAA0B,CAAEG,OAAO,CAAEN,SAAS,CAAG,CAAH,CAAO,CAA3B,CAA1B,CADT,CAEE,WAAW,CAAE,KAFf,CAGE,qBAAqB,CAGnBO,sBAASC,EAAT,GAAgB,KAAhB,CAAwB,CAACR,SAAzB,CAAqC,KANzC,CAQE,aAAa,CAAEA,SAAS,CAAG,MAAH,CAAY,MARtC,EASMC,IATN,EAWE,oBAAC,iBAAD,EAAM,KAAK,CAAED,SAAS,CAAGI,MAAM,CAACK,QAAV,CAAqBL,MAAM,CAACM,QAAlD,EACGR,QADH,CAXF,CADF,CAiBD,C,iCA3B8CS,KAAK,CAACC,S,sCA8BvD,GAAMR,CAAAA,MAAM,CAAGS,wBAAWC,MAAX,CAAkB,CAC/BT,SAAS,CAAE,CACTU,IAAI,CAAE,CADG,CAETC,QAAQ,CAAE,QAFD,CADoB,CAK/BP,QAAQ,CAAE,CACRM,IAAI,CAAE,CADE,CALqB,CAQ/BL,QAAQ,CAAE,CACRK,IAAI,CAAE,CADE,CAERE,GAAG,CAAErB,YAFG,CARqB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\r\nimport { Platform, StyleSheet, View } from 'react-native';\r\n\r\n// eslint-disable-next-line import/no-unresolved\r\nimport { Screen, screensEnabled } from 'react-native-screens';\r\n\r\ntype Props = {\r\n  isVisible: boolean;\r\n  children: React.ReactNode;\r\n  style?: any;\r\n};\r\n\r\nconst FAR_FAR_AWAY = 3000; // this should be big enough to move the whole view out of its container\r\n\r\nexport default class ResourceSavingScene extends React.Component<Props> {\r\n  render() {\r\n    if (screensEnabled && screensEnabled()) {\r\n      const { isVisible, ...rest } = this.props;\r\n      // @ts-ignore\r\n      return <Screen active={isVisible ? 1 : 0} {...rest} />;\r\n    }\r\n\r\n    const { isVisible, children, style, ...rest } = this.props;\r\n\r\n    return (\r\n      <View\r\n        style={[styles.container, style, { opacity: isVisible ? 1 : 0 }]}\r\n        collapsable={false}\r\n        removeClippedSubviews={\r\n          // On iOS, set removeClippedSubviews to true only when not focused\r\n          // This is an workaround for a bug where the clipped view never re-appears\r\n          Platform.OS === 'ios' ? !isVisible : false\r\n        }\r\n        pointerEvents={isVisible ? 'auto' : 'none'}\r\n        {...rest}\r\n      >\r\n        <View style={isVisible ? styles.attached : styles.detached}>\r\n          {children}\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    overflow: 'hidden',\r\n  },\r\n  attached: {\r\n    flex: 1,\r\n  },\r\n  detached: {\r\n    flex: 1,\r\n    top: FAR_FAR_AWAY,\r\n  },\r\n});\r\n"]}